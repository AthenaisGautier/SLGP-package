library(devtools)
build(".")
rstantools::rstan_config()
build(".")
build(".")
devtools::check("../SLGP_0.0.1.tar.gz")
library(devtools)
library(rstantools)
use_rstan()
rstantools::rstan_config()
build(".")
build(".")
document(".")
build(".")
document(".")
devtools::load_all()
N <- 10
epsilon <- runif(N)
y <- runif(N)
# library(Rcpp)
# library(RcppParallel)
# Rcpp::sourceCpp("./src/crossdist.cpp")
crossdist(as.matrix(y), as.matrix(y))-as.matrix(dist(y))
# library(RcppEigen)
# library(rstan)
# library(StanHeaders)
# rstan_options(auto_write = TRUE)
# Rcpp::sourceCpp("./src/negloglike.cpp")
## evaluated negloglike
res <- negloglike(epsilon=as.matrix(epsilon), y=as.matrix(y))
cat("Difference in scalar products:", epsilon %*% y - res, "\nDifference in gradient: ", y-attr(res, "gradient"), "\n")
Rcpp::compileAttributes(".")
devtools::install(".")
# remove.packages("SLGP")
if(false){
setwd("C:/Users/athen/Bureau/slgp")
library(rstantools)
library(devtools)
# remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
# install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
# Sys.setenv(PKG_CXXFLAGS = StanHeaders:::CxxFlags(as_character = TRUE))
# SH <- system.file(ifelse(.Platform$OS.type == "windows", "libs", "lib"), .Platform$r_arch, package = "StanHeaders", mustWork = TRUE)
# Sys.setenv(PKG_LIBS = paste0(StanHeaders:::LdFlags(as_character = TRUE), " -L", shQuote(SH), " -lStanHeaders"))
devtools::create(path = "./SLGP",
rstudio = TRUE,
roxygen = TRUE,
open = FALSE)
library(devtools)
use_gpl3_license()
devtools::document()
build()
check()
# Make description
new_description_path <- "./DESCRIPTION"
old_description_path <- "../slgprov-2/SLGP/DESCRIPTION"
# Open both files in RStudio
file.edit(new_description_path); file.edit(old_description_path)
}
# remove.packages("SLGP")
if(FALSE){
setwd("C:/Users/athen/Bureau/slgp")
library(rstantools)
library(devtools)
# remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
# install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
# Sys.setenv(PKG_CXXFLAGS = StanHeaders:::CxxFlags(as_character = TRUE))
# SH <- system.file(ifelse(.Platform$OS.type == "windows", "libs", "lib"), .Platform$r_arch, package = "StanHeaders", mustWork = TRUE)
# Sys.setenv(PKG_LIBS = paste0(StanHeaders:::LdFlags(as_character = TRUE), " -L", shQuote(SH), " -lStanHeaders"))
devtools::create(path = "./SLGP",
rstudio = TRUE,
roxygen = TRUE,
open = FALSE)
library(devtools)
use_gpl3_license()
devtools::document()
build()
check()
# Make description
new_description_path <- "./DESCRIPTION"
old_description_path <- "../slgprov-2/SLGP/DESCRIPTION"
# Open both files in RStudio
file.edit(new_description_path); file.edit(old_description_path)
}
library(devtools)
library(rstantools)
build(".")
document(".")
devtools::load_all()
N <- 10
epsilon <- runif(N)
y <- runif(N)
# library(Rcpp)
# library(RcppParallel)
# Rcpp::sourceCpp("./src/crossdist.cpp")
crossdist(as.matrix(y), as.matrix(y))-as.matrix(dist(y))
# library(RcppEigen)
# library(rstan)
# library(StanHeaders)
# rstan_options(auto_write = TRUE)
# Rcpp::sourceCpp("./src/negloglike.cpp")
## evaluated negloglike
res <- negloglike(epsilon=as.matrix(epsilon), y=as.matrix(y))
cat("Difference in scalar products:", epsilon %*% y - res, "\nDifference in gradient: ", y-attr(res, "gradient"), "\n")
Rcpp::compileAttributes(".")
devtools::install(".")
unlink("C:/Users/athen/AppData/Local/R/win-library/4.3/00LOCK-SLGP", recursive = TRUE)
devtools::install(".", force = TRUE)
devtools::install(".", verbose = TRUE)
remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
install.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
Sys.setenv(PKG_CXXFLAGS = StanHeaders:::CxxFlags(as_character = TRUE))
SH <- system.file(ifelse(.Platform$OS.type == "windows", "libs", "lib"), .Platform$r_arch, package = "StanHeaders", mustWork = TRUE)
Sys.setenv(PKG_LIBS = paste0(StanHeaders:::LdFlags(as_character = TRUE), " -L", shQuote(SH), " -lStanHeaders"))
library(devtools)
library(rstantools)
use_rstan()
build(".")
document(".")
document(".")
devtools::load_all()
N <- 10
epsilon <- runif(N)
y <- runif(N)
# library(Rcpp)
# library(RcppParallel)
# Rcpp::sourceCpp("./src/crossdist.cpp")
crossdist(as.matrix(y), as.matrix(y))-as.matrix(dist(y))
# library(RcppEigen)
# library(rstan)
# library(StanHeaders)
# rstan_options(auto_write = TRUE)
# Rcpp::sourceCpp("./src/negloglike.cpp")
## evaluated negloglike
res <- negloglike(epsilon=as.matrix(epsilon), y=as.matrix(y))
cat("Difference in scalar products:", epsilon %*% y - res, "\nDifference in gradient: ", y-attr(res, "gradient"), "\n")
Rcpp::compileAttributes(".")
devtools::install(".")
libPaths()
.libPaths()
myPaths <- .libPaths()
myPaths
myPaths <- c(myPaths[2], myPaths[1])
myPaths
.libPaths(myPaths)  # reassign them
devtools::install(".")
?devtools::install
devtools::install(".", dependencies=TRUE, build=TRUE)
devtools::install(".", dependencies=TRUE, build=TRUE, reload=TRUE, quiet=FALSE, args = c("--preclean", "--no-multiarch"))
devtools::install(".", dependencies=TRUE, build=TRUE,
reload=TRUE, quiet=FALSE,
args = c("--preclean", "--no-multiarch"),
lib = myPaths[1])
devtools::session_info("rstan")
install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type = "source")
devtools::session_info("rstan")
Sys.setenv(PKG_CXXFLAGS = StanHeaders:::CxxFlags(as_character = TRUE))
SH <- system.file(ifelse(.Platform$OS.type == "windows", "libs", "lib"), .Platform$r_arch, package = "StanHeaders", mustWork = TRUE)
Sys.setenv(PKG_LIBS = paste0(StanHeaders:::LdFlags(as_character = TRUE), " -L", shQuote(SH), " -lStanHeaders"))
# remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
# install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
# install.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
devtools::session_info("rstan")
# remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
# install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
# install.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
devtools::session_info("rstan")
Sys.setenv(PKG_CXXFLAGS = StanHeaders:::CxxFlags(as_character = TRUE))
SH <- system.file(ifelse(.Platform$OS.type == "windows", "libs", "lib"), .Platform$r_arch, package = "StanHeaders", mustWork = TRUE)
Sys.setenv(PKG_LIBS = paste0(StanHeaders:::LdFlags(as_character = TRUE), " -L", shQuote(SH), " -lStanHeaders"))
# remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
# install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
devtools::session_info("rstan")
remove.packages("SLGP")
remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
Sys.setenv(PKG_CXXFLAGS = StanHeaders:::CxxFlags(as_character = TRUE))
SH <- system.file(ifelse(.Platform$OS.type == "windows", "libs", "lib"), .Platform$r_arch, package = "StanHeaders", mustWork = TRUE)
library(rstantools)
library(devtools)
remove.packages("SLGP")
remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"))
remove.packages("SLGP", lib = "C:/Users/athen/Documents/R/win-library/3.6")
remove.packages("SLGP", lib = .libPaths()[1])
remove.packages("SLGP", lib = .libPaths()[2])
remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"), lib = .libPaths()[2])
remove.packages(c("BH","RcppEigen","rstan","StanHeaders", "RcppParallel"), lib = .libPaths()[1])
install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type="source")
install.packages(c("BH", "Rcpp", "RcppEigen", "RcppParallel"), type = "source")
1+1
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
Sys.setenv(PKG_CXXFLAGS = StanHeaders:::CxxFlags(as_character = TRUE))
SH <- system.file(ifelse(.Platform$OS.type == "windows", "libs", "lib"), .Platform$r_arch, package = "StanHeaders", mustWork = TRUE)
Sys.setenv(PKG_LIBS = paste0(StanHeaders:::LdFlags(as_character = TRUE), " -L", shQuote(SH), " -lStanHeaders"))
devtools::session_info("rstan")
devtools::create(path = "./SLGP",
rstudio = TRUE,
roxygen = TRUE,
open = FALSE)
library(devtools)
build(".")
document(".")
devtools::load_all(export_all = FALSE)
N <- 10
epsilon <- runif(N)
y <- runif(N)
# library(Rcpp)
# library(RcppParallel)
# Rcpp::sourceCpp("./src/crossdist.cpp")
crossdist(as.matrix(y), as.matrix(y))-as.matrix(dist(y))
# library(RcppEigen)
# library(rstan)
# library(StanHeaders)
# rstan_options(auto_write = TRUE)
# Rcpp::sourceCpp("./src/negloglike.cpp")
## evaluated negloglike
res <- negloglike(epsilon=as.matrix(epsilon), y=as.matrix(y))
cat("Difference in scalar products:", epsilon %*% y - res, "\nDifference in gradient: ", y-attr(res, "gradient"), "\n")
Rcpp::compileAttributes(".")
myPaths <- .libPaths()
pkgbuild::compile_dll()
roxygen2::roxygenise(package.dir = ".", clean = TRUE)
roxygen2::roxygenise(package.dir = ".", clean = TRUE)
roxygen2::roxygenise(load_code = "source")
devtools::install(".", dependencies=TRUE, build=TRUE,
reload=TRUE, quiet=FALSE,
args = c("--preclean", "--no-multiarch"))
.Last.error
pkgbuild::compile_dll()
roxygen2::roxygenise(load_code = "source")
Sys.which("make")
Sys.getenv("PATH")
devtools::session_info("SLGP")
N <- 10
epsilon <- runif(N)
y <- runif(N)
# library(Rcpp)
# library(RcppParallel)
# Rcpp::sourceCpp("./src/crossdist.cpp")
crossdist(as.matrix(y), as.matrix(y))-as.matrix(dist(y))
# library(RcppEigen)
# library(rstan)
# library(StanHeaders)
# rstan_options(auto_write = TRUE)
# Rcpp::sourceCpp("./src/negloglike.cpp")
## evaluated negloglike
res <- negloglike(epsilon=as.matrix(epsilon), y=as.matrix(y))
cat("Difference in scalar products:", epsilon %*% y - res, "\nDifference in gradient: ", y-attr(res, "gradient"), "\n")
Rcpp::compileAttributes(".")
library(devtools)
build(".")
rstantools::rstan_config()
build(".")
# use_rstan()
rstantools::rstan_config()
build(".")
build(".")
document(".")
?rstan_config
build(".")
Rcpp::compileAttributes(".")
myPaths <- .libPaths()
pkgbuild::compile_dll()
roxygen2::roxygenise(package.dir = ".", clean = TRUE)
roxygen2::roxygenise(load_code = "source")
devtools::build(binary = TRUE, args = c('--preclean'))
devtools::build(binary = TRUE, args = c('--preclean'), lib=.libPaths()[2])
build(".")
build(".", binary = TRUE)
?devtools::install
Rcpp::compileAttributes(".")
pkgbuild::compile_dll()
build(".", args = c('--preclean'))
build(".", binary = TRUE, args = c('--preclean'))
document(".")
devtools::session_info("SLGP")
install.packages("C:/Users/athen/Bureau/slgp/SLGP_0.0.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/athen/Bureau/slgp/SLGP_0.0.1.tar.gz", repos = NULL, type = "source", lib="C:/Program Files/R/R-4.3.2/library")
Rcpp::compileAttributes(".")
pkgbuild::compile_dll()
?pkgbuild::compile_dll
devtools::session_info("SLGP")
build(".", binary = TRUE, args = c('--preclean'), , dependencies = TRUE)
devtools::load_all(export_all = FALSE)
devtools::session_info("SLGP")
N <- 10
epsilon <- runif(N)
y <- runif(N)
# library(Rcpp)
# library(RcppParallel)
# Rcpp::sourceCpp("./src/crossdist.cpp")
crossdist(as.matrix(y), as.matrix(y))-as.matrix(dist(y))
# library(RcppEigen)
# library(rstan)
# library(StanHeaders)
# rstan_options(auto_write = TRUE)
# Rcpp::sourceCpp("./src/negloglike.cpp")
## evaluated negloglike
res <- negloglike(epsilon=as.matrix(epsilon), y=as.matrix(y))
cat("Difference in scalar products:", epsilon %*% y - res, "\nDifference in gradient: ", y-attr(res, "gradient"), "\n")
# use_rstan()
rstantools::rstan_config()
build(".", args = c('--preclean'))
library(devtools)
library(rstantools)
# use_rstan()
rstantools::rstan_config()
build(".", args = c('--preclean'))
build(".", binary = TRUE, args = c('--preclean'))
.Last.error
?devtools::build
install.packages("roxygen2", lib="C:/Program Files/R/R-4.3.2/library")
document(".")
pkgbuild::build(pkg = ".", dest_path = getwd(), binary = FALSE, args = c('--preclean'))
pkgbuild::build(pkg = ".", dest_path = getwd(), binary = FALSE, args = c('--preclean'))
pkgbuild::build( dest_path = getwd(), binary = FALSE, args = c('--preclean'))
?pkgbuild::build
pkgbuild::build( dest_path = getwd(), binary = FALSE, args = c('--preclean'), binary=TRUE)
pkgbuild::build( dest_path = getwd(), args = c('--preclean'), binary=TRUE)
pkgbuild::find_rtools()
setwd("C:/Users/athen/Bureau/slgp/SLGP")
install.packages("processx", lib="C:/Program Files/R/R-4.3.2/library")
build(".", args = c('--preclean'))
library(devtools)
# use_rstan()
rstantools::rstan_config()
build(".", args = c('--preclean'))
build(".", binary = TRUE, args = c('--preclean'))
build(".", args = c('--preclean'))
build(".", binary = TRUE, args = c('--preclean'))
